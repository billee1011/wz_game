// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from hero.proto</summary>
  public static partial class HeroReflection {

    #region Descriptor
    /// <summary>File descriptor for hero.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HeroReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpoZXJvLnByb3RvEgVwcm90byKOAgoMUEJIZXJvRW50aXR5Eg8KB2hlcm9f",
            "aWQYASABKAMSDwoHY29uZl9pZBgCIAEoBRINCgVsZXZlbBgDIAEoBRITCgti",
            "cmVha19sZXZlbBgEIAEoBRILCgNleHAYBSABKAUSEgoKYXdha2VfaW5mbxgG",
            "IAMoBRITCgthd2FrZV9sZXZlbBgHIAEoBRIWCg50aWFubWluZ19sZXZlbBgI",
            "IAEoBRI3CgphdHRyaWJ1dGVzGAkgAygLMiMucHJvdG8uUEJIZXJvRW50aXR5",
            "LkF0dHJpYnV0ZXNFbnRyeRoxCg9BdHRyaWJ1dGVzRW50cnkSCwoDa2V5GAEg",
            "ASgFEg0KBXZhbHVlGAIgASgFOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PBHeroEntity), global::Proto.PBHeroEntity.Parser, new[]{ "HeroId", "ConfId", "Level", "BreakLevel", "Exp", "AwakeInfo", "AwakeLevel", "TianmingLevel", "Attributes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PBHeroEntity : pb::IMessage<PBHeroEntity> {
    private static readonly pb::MessageParser<PBHeroEntity> _parser = new pb::MessageParser<PBHeroEntity>(() => new PBHeroEntity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PBHeroEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.HeroReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHeroEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHeroEntity(PBHeroEntity other) : this() {
      heroId_ = other.heroId_;
      confId_ = other.confId_;
      level_ = other.level_;
      breakLevel_ = other.breakLevel_;
      exp_ = other.exp_;
      awakeInfo_ = other.awakeInfo_.Clone();
      awakeLevel_ = other.awakeLevel_;
      tianmingLevel_ = other.tianmingLevel_;
      attributes_ = other.attributes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PBHeroEntity Clone() {
      return new PBHeroEntity(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private long heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "conf_id" field.</summary>
    public const int ConfIdFieldNumber = 2;
    private int confId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "break_level" field.</summary>
    public const int BreakLevelFieldNumber = 4;
    private int breakLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BreakLevel {
      get { return breakLevel_; }
      set {
        breakLevel_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 5;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "awake_info" field.</summary>
    public const int AwakeInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_awakeInfo_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> awakeInfo_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AwakeInfo {
      get { return awakeInfo_; }
    }

    /// <summary>Field number for the "awake_level" field.</summary>
    public const int AwakeLevelFieldNumber = 7;
    private int awakeLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwakeLevel {
      get { return awakeLevel_; }
      set {
        awakeLevel_ = value;
      }
    }

    /// <summary>Field number for the "tianming_level" field.</summary>
    public const int TianmingLevelFieldNumber = 8;
    private int tianmingLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TianmingLevel {
      get { return tianmingLevel_; }
      set {
        tianmingLevel_ = value;
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 9;
    private static readonly pbc::MapField<int, int>.Codec _map_attributes_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 74);
    private readonly pbc::MapField<int, int> attributes_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Attributes {
      get { return attributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PBHeroEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PBHeroEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (ConfId != other.ConfId) return false;
      if (Level != other.Level) return false;
      if (BreakLevel != other.BreakLevel) return false;
      if (Exp != other.Exp) return false;
      if(!awakeInfo_.Equals(other.awakeInfo_)) return false;
      if (AwakeLevel != other.AwakeLevel) return false;
      if (TianmingLevel != other.TianmingLevel) return false;
      if (!Attributes.Equals(other.Attributes)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0L) hash ^= HeroId.GetHashCode();
      if (ConfId != 0) hash ^= ConfId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BreakLevel != 0) hash ^= BreakLevel.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      hash ^= awakeInfo_.GetHashCode();
      if (AwakeLevel != 0) hash ^= AwakeLevel.GetHashCode();
      if (TianmingLevel != 0) hash ^= TianmingLevel.GetHashCode();
      hash ^= Attributes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroId);
      }
      if (ConfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (BreakLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BreakLevel);
      }
      if (Exp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Exp);
      }
      awakeInfo_.WriteTo(output, _repeated_awakeInfo_codec);
      if (AwakeLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AwakeLevel);
      }
      if (TianmingLevel != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TianmingLevel);
      }
      attributes_.WriteTo(output, _map_attributes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroId);
      }
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BreakLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakLevel);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      size += awakeInfo_.CalculateSize(_repeated_awakeInfo_codec);
      if (AwakeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwakeLevel);
      }
      if (TianmingLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TianmingLevel);
      }
      size += attributes_.CalculateSize(_map_attributes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PBHeroEntity other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0L) {
        HeroId = other.HeroId;
      }
      if (other.ConfId != 0) {
        ConfId = other.ConfId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BreakLevel != 0) {
        BreakLevel = other.BreakLevel;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      awakeInfo_.Add(other.awakeInfo_);
      if (other.AwakeLevel != 0) {
        AwakeLevel = other.AwakeLevel;
      }
      if (other.TianmingLevel != 0) {
        TianmingLevel = other.TianmingLevel;
      }
      attributes_.Add(other.attributes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroId = input.ReadInt64();
            break;
          }
          case 16: {
            ConfId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            BreakLevel = input.ReadInt32();
            break;
          }
          case 40: {
            Exp = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            awakeInfo_.AddEntriesFrom(input, _repeated_awakeInfo_codec);
            break;
          }
          case 56: {
            AwakeLevel = input.ReadInt32();
            break;
          }
          case 64: {
            TianmingLevel = input.ReadInt32();
            break;
          }
          case 74: {
            attributes_.AddEntriesFrom(input, _map_attributes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
